import static org.junit.Assert.*;
//import static org.junit.Assert.assertThat;

import org.junit.Test;

public class testLowestCommonAncestor {
	
	// test Node constructor
	@Test
    public void testConstructor()
    {
      Node node = new Node(0);
      assertEquals(0, node.data);
      assertEquals(null, node.left);
      assertEquals(null, node.right);
    }

	// test creation of binary tree
	@Test
	public void testLcaBinaryTreeConstructor() {
		
		// create empty binary tree, expect return of -1 when checking for LCA of 2 values as neither are in binary tree
		lcaBinaryTree bt = new lcaBinaryTree();
		assertEquals(null, bt.root);
		
	}
	
	// test add() method
	@Test
	public void testAdd() {
		
		// create new empty binary tree, expect root to be null
		lcaBinaryTree bt = new lcaBinaryTree();
		assertEquals(null, bt.root);

		// add value of 2, this will become our root, expect root value to be 2 and child nodes to be null
		bt.add(2);
		assertEquals(2, bt.root.data);
		assertEquals(null, bt.root.left);
		assertEquals(null, bt.root.right);
		
		// add node with value of 4, expect this to become right child node of root and left child node to remain null
		bt.add(4);
		assertEquals(4, bt.root.right.data);
		assertEquals(null, bt.root.left);
		
		// add node with value of 9, expect this to become right child node{4}, left child node should remain null
		bt.add(9);
		assertEquals(9, bt.root.right.right.data);
		assertEquals(null, bt.root.right.left);
		
		// add node with value of 1, expect this to become left child node of root, both child nodes of this node should be null
		bt.add(1);
		assertEquals(1, bt.root.left.data);
		assertEquals(null, bt.root.left.left);
		assertEquals(null, bt.root.left.right);
		
		// add node with value of 7, expect this to become left child node of node{9}
		bt.add(7);
		assertEquals(7, bt.root.right.right.left.data);
	
	}
	
	// test delete() method checking if node has been correctly deleted from binary tree
	@Test
	public void testDelete() {
		
		// create and populate binary tree
		lcaBinaryTree bt = new lcaBinaryTree();
		bt.add(5);
		bt.add(2);
		bt.add(8);
		bt.add(6);
		bt.add(1);
		bt.add(7);
		bt.add(4);
		
		// we wish to delete node with value 1, first assertion shows node with value 1, after delete() carried out, node is null as expected
		assertEquals(1, bt.root.left.left.data);
		bt.delete(1);
		assertEquals(null, bt.root.left.left);
		
		// we wish to delete node with value 6, first assertion shows node with value 6, after delete() carried out, node{6} has been deleted and replaced with child node {7}
		assertEquals(6, bt.root.right.left.data);
		bt.delete(6);
		assertEquals(7, bt.root.right.left.data);
		
		
		// deleting root, root successfully replaced with smallest value from right subtree {7}
		assertEquals(5, bt.root.data);
		bt.delete(5);
		assertEquals(7, bt.root.data);
		
	}

	// test findLCA() method to ensure  correct value is being returned
		@Test
		public void testFindLCA() {
			
			// create and populate binary tree
			lcaBinaryTree bt = new lcaBinaryTree();
			
			// check when tree is empty
			assertEquals("The binary tree is empty", -1, bt.findLCA(1, 2));
			
			bt.add(5);
			
			// check when tree only has 1 node
			assertEquals(-1, bt.findLCA(5, 2));
			
			bt.add(2);
			bt.add(8);
			bt.add(6);
			bt.add(1);
			bt.add(7);
			bt.add(4);
			
			// where one of parameters is LCA
			assertEquals(5, bt.findLCA(8,5));
			assertEquals(2, bt.findLCA(2,4));
			
			// where parameters are same
			// our binary tree implementation does not allow for duplicates, but parameters may refer to one node twice
			assertEquals(5, bt.findLCA(5,5));
			
			// where parameter nodes are in different subtrees
			assertEquals(5, bt.findLCA(7,4));
			assertEquals(2, bt.findLCA(4,1));
			assertEquals(5, bt.findLCA(8,2));
			
			// where one or both parameters are not in the binary tree
			assertEquals(-1, bt.findLCA(8,11));
			assertEquals(-1, bt.findLCA(11,3));
		}
	
}
