import static org.junit.Assert.*;
//import static org.junit.Assert.assertThat;

import org.junit.Test;

public class testLowestCommonAncestor {
	
	// Development Task 1 - LCA Binary Tree Implementation Tests
	
	// test Node constructor
	@Test
    public void testNodeConstructor()
    {
      Node node = new Node(0);
      assertEquals(0, node.data);
      assertEquals(null, node.left);
      assertEquals(null, node.right);
    }

	// test creation of binary tree
	@Test
	public void testLCAConstructor() {
		
		// create empty binary tree and check methods run
		LCA bt = new LCA();
		assertEquals(null, bt.root);
		bt.add(1);
		bt.delete(1);
		
	}
	
	// test add() method
	@Test
	public void testAdd() {
		
		// create new empty binary tree, expect root to be null
		LCA bt = new LCA();
		assertEquals(null, bt.root);

		// add value of 2, this will become our root, expect root value to be 2 and child nodes to be null
		bt.add(2);
		assertEquals(2, bt.root.data);
		assertEquals(null, bt.root.left);
		assertEquals(null, bt.root.right);
		
		// add node with value of 4, expect this to become right child node of root and left child node to remain null
		bt.add(4);
		assertEquals(4, bt.root.right.data);
		assertEquals(null, bt.root.left);
		
		// add node with value of 9, expect this to become right child node{4}, left child node should remain null
		bt.add(9);
		assertEquals(9, bt.root.right.right.data);
		assertEquals(null, bt.root.right.left);
		
		// add node with value of 1, expect this to become left child node of root, both child nodes of this node should be null
		bt.add(1);
		assertEquals(1, bt.root.left.data);
		assertEquals(null, bt.root.left.left);
		assertEquals(null, bt.root.left.right);
		
		// add node with value of 7, expect this to become left child node of node{9}
		bt.add(7);
		assertEquals(7, bt.root.right.right.left.data);
	
	}
	
	// test delete() method checking if node has been correctly deleted from binary tree
	@Test
	public void testDelete() {
		
		// create and populate binary tree
		LCA bt = new LCA();
		bt.add(5);
		bt.add(2);
		bt.add(8);
		bt.add(6);
		bt.add(1);
		bt.add(7);
		bt.add(4);
		
		// we wish to delete node with value 1, first assertion shows node with value 1, after delete() carried out, node is null as expected
		assertEquals(1, bt.root.left.left.data);
		bt.delete(1);
		assertEquals(null, bt.root.left.left);
		
		// we wish to delete node with value 6, first assertion shows node with value 6, after delete() carried out, node{6} has been deleted and replaced with child node {7}
		assertEquals(6, bt.root.right.left.data);
		bt.delete(6);
		assertEquals(7, bt.root.right.left.data);
		
		
		// deleting root, root successfully replaced with smallest value from right subtree {7}
		assertEquals(5, bt.root.data);
		bt.delete(5);
		assertEquals(7, bt.root.data);
		
	}

	// test findLCA() method to ensure  correct value is being returned
		@Test
		public void testFindLCA() {
			
			// create and populate binary tree
			LCA bt = new LCA();
			
			// check when tree is empty
			assertEquals("The binary tree is empty", -1, bt.findLCA(1, 2));
			
			bt.add(5);
			
			// check when tree only has 1 node
			assertEquals(-1, bt.findLCA(5, 2));
			
			bt.add(2);
			bt.add(8);
			bt.add(6);
			bt.add(1);
			bt.add(7);
			bt.add(4);
			
			// where one of parameters is LCA
			assertEquals(5, bt.findLCA(8,5));
			assertEquals(2, bt.findLCA(2,4));
			
			// where parameters are same
			// our binary tree implementation does not allow for duplicates, but parameters may refer to one node twice
			assertEquals(5, bt.findLCA(5,5));
			
			// where parameter nodes are in different subtrees
			assertEquals(5, bt.findLCA(7,4));
			assertEquals(2, bt.findLCA(4,1));
			assertEquals(5, bt.findLCA(8,2));
			
			// where one or both parameters are not in the binary tree
			assertEquals(-1, bt.findLCA(8,11));
			assertEquals(-1, bt.findLCA(11,3));
			
		}
		
		
		
		
		// Development Task 2 - LCA DAG Implementation Tests
		
		// test DAG constructor working as expected
		@Test
		void testDAGConstructor() {
			
		}
		
		// test V() function returns correct number of vertices
		@Test
		void testV() {
			
		}
		
		// make sure vertex validity is correctly tested, and -1 is returned if vertex is invalid
		@Test 
		void TestValidateVertex(){
			
		}
		
		// test E() function returns correct number of edges
		@Test
		void testE() {
			
		}

		// test if hasCycle() method can correctly differentiate between cyclical and non-cyclical graphs
		@Test
		void testHasCycle() {
			
		}
		
		
		@Test 
		void testContainsCycle() {//Testing for Dag with cycle (assertFalse)
			LCA_DAG DAG = new LCA_DAG(7);
			DAG.addEdge(1, 3);
			DAG.addEdge(3, 4);
			DAG.addEdge(4, 1);
			DAG.isAcyclic();
			assertFalse("Check DAG contains a cycle", DAG.checkDAG);

			LCA_DAG DAG2 = new LCA_DAG(9);
			DAG2.addEdge(3, 6);
			DAG2.addEdge(3, 4);
			DAG2.addEdge(6, 2);
			DAG2.addEdge(1, 3);
			DAG2.addEdge(1, 2);
			DAG2.addEdge(8, 4);
			DAG2.addEdge(2, 3);
			DAG2.isAcyclic();
			assertFalse("Check DAG contains a cycle", DAG2.checkDAG);	
		}

		@Test
		void testLCA() {//Tests for LCA
			//Check LCA on empty graph
			LCA_DAG empty = new LCA_DAG(200);
			assertEquals("Testing LCA on empty graph.",empty.LCA(1, 3),-1);
			
			//normal check on LCA
			LCA_DAG DAG2 = new LCA_DAG(8);
			DAG2.addEdge(1, 2);
			DAG2.addEdge(1, 3);
			DAG2.addEdge(2, 4);
			DAG2.addEdge(2, 5);
			DAG2.addEdge(5, 7);
			DAG2.addEdge(3, 6);
			assertEquals("Check LCA(7,3) is 1", DAG2.LCA(7, 3), 1);
			assertEquals("Check LCA(5,3) is 2", DAG2.LCA(5, 3), 1);
			assertEquals("Check LCA(7,2) is 1", DAG2.LCA(7, 2), 2);
			
			//try LCA on graph that contains a cycle
			LCA_DAG DAG3 = new LCA_DAG(8);
			DAG3.addEdge(2, 3);
			DAG3.addEdge(3, 4);
			assertEquals("Check LCA on graph with cycle.",DAG3.LCA(1, 3),-1);
			
			//Check LCA when there are no common Ancestors
			LCA_DAG DAG4 = new LCA_DAG(7);
			DAG4.addEdge(1, 5);
			DAG4.addEdge(2, 4);
			DAG4.addEdge(4, 5);
			DAG4.addEdge(3, 6);
			assertEquals("Check LCA with no common ancestors.",DAG4.LCA(1, 3),-1);
			
			//check when edge is 0
			LCA_DAG DAG5 = new LCA_DAG(8);
			DAG5.addEdge(0, 0);
			assertEquals("Check when edge passed is 0.",DAG5.LCA(1, 3),-1);

		
		}
	
}
