import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedList;

// largely based on Sedgewick and Wayne's Digraph.java code

public class DAG {
	private int V;						// number of vertices digraph
	private int E;						// number of edges in digraph
	private ArrayList<Integer>[] adj;	// adj[v] = adjacency list for vertex v
	private int[] indegree;				// indegree[v] = indegree of vertex v
	private boolean marked[];			// boolean List to track visited vertices
	private boolean hasCycle;			// true if cycle in graph
	private boolean stack[];			// order that vertices were visited in 



	public DAG(int V) {
		if (V < 0) throw new IllegalArgumentException("Number of vertices in a digraph must be nonnegative");
		this.V = V;
		this.E = 0;
		indegree = new int[V];
		marked = new boolean[V];
		stack = new boolean[V];
		adj = (ArrayList<Integer>[]) new ArrayList[V];
		for (int v = 0; v < V; v++) {
			adj[v] = new ArrayList<Integer>();
		}              
	}

	// return number of vertices in digraph
	public int V() {
		return V;	
	}

	// return -1 unless 0 <= v < V
	private int validateVertex(int v) {
		if (v < 0 || v >= V)
			return -1;
		else
			return 1;
	}

	// return number of edges in digraph
	public int E() {
		return E;
	}

	// adds a directed edge from v to w
	public void addEdge(int v, int w) {
		if((validateVertex(v)>0)&&(validateVertex(w)>0)) {
			adj[v].add(w);
			indegree[w]++;
			E++;
		}
		else
			System.out.println("Please enter vertices between 0 & n-1");
	}

	// returns number of directed edges going in to vertex v
	public int inDegree(int v) {
		if(validateVertex(v)<0)
			return -1;
		else
			return indegree[v];
	}

	// returns number of directed edges coming from vertex v
	public int outDegree(int v) {
		if(validateVertex(v)<0)
			return -1;
		else
			return adj[v].size();
	}

	// returns the vertices adjacent to v
	public Iterable<Integer> adj(int v) { 
		return adj[v]; 
	}

	// checking if graph is actually acyclical
	public boolean hasCycle() {
		return hasCycle;
	}

	public void findCycle(int v) {
		marked[v] = true;
		stack[v] = true;

		for (int w : adj(v)) {
			if(!marked[w])
				findCycle(w);
			else if (stack[w]) {
				hasCycle = true;
				return;
			}
		}

		stack[v] = false;
	}

	// to find the LCA, we have to traverse the graph backwards as the LCA comes before the two nodes
	public DAG reverse() {
		// create new DAG with same number of vertices
		DAG reverse = new DAG(V); 
		// loop through vertices of graph, reversing direction of edges
		for (int v = 0; v < V; v++) {
			for (int w : adj(v)) {
				reverse.addEdge(w, v);
			}
		}
		return reverse;
	}	 

	// returns lowest common ancestor of v and w
	public int findLCADAG(int v, int w) {
		findCycle(0);
		if(hasCycle) {
			// graph is not a DAG
			return -1;
		}

		// reverse the DAG for easier traversal
		DAG backwards = reverse();

		// locate the two points in the graph
		ArrayList<Integer> vPath = backwards.BFS(v);
		ArrayList<Integer> wPath = backwards.BFS(w);
		ArrayList<Integer> commonAncestors = new ArrayList<Integer>();
		boolean found = false;

		// cycle through BFS paths, adding all common ancestors to the arrayList
		// return the first one found, as it is the closest to the nodes and hence the lowest common ancestor
		for(int i = 0; i < vPath.size(); i++) {
			for(int t = 0; t < wPath.size(); t++) {		
				if(vPath.get(i) == wPath.get(t)) {
					commonAncestors.add(vPath.get(i));	
					found = true;
				}
			}
		}

		// return -1 where no LCA is found (empty DAG etc)
		if(found)
			return commonAncestors.get(0);
		else
			return -1;
	}

	// breadth first search of graph
	public ArrayList<Integer> BFS(int s) {
		boolean visited[] = new boolean[V];
		LinkedList<Integer> queue = new LinkedList<Integer>();
		ArrayList<Integer> result = new ArrayList<Integer>();

		visited[s] = true;
		queue.add(s);

		while (queue.size() != 0) {
			s = queue.poll();
			result.add(s);
			Iterator<Integer> i = adj[s].listIterator();
			while (i.hasNext()) {
				int n = i.next();
				if (!visited[n]) {
					visited[n] = true;
					queue.add(n);
				}
			}
		}

		return result;
	}


}