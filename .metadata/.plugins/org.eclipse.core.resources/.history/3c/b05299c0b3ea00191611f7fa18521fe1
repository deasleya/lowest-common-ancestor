import static org.junit.Assert.*;
//import static org.junit.Assert.assertThat;

import org.junit.Test;

public class testLowestCommonAncestor {
	
	// test constructor
	@Test
    public void testConstructor()
    {
      Node node = new Node(0);
      assertEquals(0, node.data);
      assertEquals(null, node.left);
      assertEquals(null, node.right);
    }

	// test creation of binary tree
	@Test
	public void testEmptyTree() {
		
		// create empty binary tree, expect return of -1 when checking for LCA of 2 values as neither are in binary tree
		lcaBinaryTree emptyTree = new lcaBinaryTree();
		assertEquals(null, emptyTree.root);
		assertEquals("The binary tree is empty", -1, emptyTree.findLCA(1, 2));
		
		// add a node to the binary tree for comparison, still expect -1 to be returned as there is only one value
		emptyTree.add(2);
		assertEquals("The binary tree is empty", -1, emptyTree.findLCA(1, 2));
		
		// add a second node and look up LCA of two values both now contained in binary tree, expect root value to be returned (2)
		emptyTree.add(1);
		assertEquals("The binary tree is empty", 2, emptyTree.findLCA(1, 2));
		
	}
	
	@Test
	public void testContains() {
		// test contains method checking if binary tree contains given value to ensure only valid parameters are accepted when searching for a lca
	}
	
	// test add() method
	@Test
	public void testAdd() {
		
		// create new empty binary tree, expect root to be null
		lcaBinaryTree bt = new lcaBinaryTree();
		assertEquals(null, bt.root);

		// add value of 2, this will become our root, expect root value to be 2 and child nodes to be null
		bt.add(2);
		assertEquals(2, bt.root.data);
		assertEquals(null, bt.root.left);
		assertEquals(null, bt.root.right);
		
		// add node with value of 4, expect this to become right child node of root and left child node to remain null
		bt.add(4);
		assertEquals(4, bt.root.right.data);
		assertEquals(null, bt.root.left);
		
		// add node with value of 9, expect this to become right child node{4}, left child node should remain null
		bt.add(9);
		assertEquals(9, bt.root.right.right.data);
		assertEquals(null, bt.root.right.left);
		
		// add node with value of 1, expect this to become left child node of root, both child nodes of this node should be null
		bt.add(1);
		assertEquals(1, bt.root.left.data);
		assertEquals(null, bt.root.left.left);
		assertEquals(null, bt.root.left.right);
		
		// add node with value of 7, expect this to become left child node of node{9}
		bt.add(7);
		assertEquals(7, bt.root.right.right.left.data);
	
	}
	
	@Test
	public void testDelete() {
		// test delete method checking if node has been correctly deleted from binary tree
	}

	
}
